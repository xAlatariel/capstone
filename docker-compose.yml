version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aicanipai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aicanipai_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - aicanipai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aicanipai_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Spring Boot Backend
  backend:
    build: 
      context: ./Capstone
      dockerfile: Dockerfile
    container_name: aicanipai-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_URL: jdbc:postgresql://postgres:5432/aicanipai_prod
      DB_USERNAME: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL:-https://www.aicanipai.it}
      BACKEND_URL: ${BACKEND_URL:-https://api.aicanipai.it}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://www.aicanipai.it,https://aicanipai.it}
      RECAPTCHA_SECRET: ${RECAPTCHA_SECRET}
      RECAPTCHA_SITE: ${RECAPTCHA_SITE}
      JAVA_OPTS: -Xmx512m -Xms256m
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    networks:
      - aicanipai-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend (Build)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: aicanipai-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      VITE_API_BASE_URL: ${BACKEND_URL:-https://api.aicanipai.it}
    networks:
      - aicanipai-network
    depends_on:
      backend:
        condition: service_healthy

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aicanipai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - aicanipai-network
    depends_on:
      - frontend
      - backend

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: aicanipai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aicanipai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  aicanipai-network:
    driver: bridge